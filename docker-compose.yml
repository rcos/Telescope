# Development docker-compose file. Will pull up local Postgres database
# and local PostgREST API for running telescope locally.
version: "3.1"

services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "db_data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

  # Hasura Postgres -> GraphQL engine
  hasura:
    image: hasura/graphql-engine:v2.0.10
    restart: unless-stopped
    depends_on:
      - db
    environment:
      # https://hasura.io/docs/1.0/graphql/core/deployment/graphql-engine-flags/reference.html
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "web_anon"
      HASURA_GRAPHQL_DATABASE_URL: "${DATABASE_URL}"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_JWT_SECRET: "{ \"type\": \"HS256\", \"key\": \"${RCOS_JWT_SECRET}\" }"
      HASURA_GRAPHQL_LOG_LEVEL: "info"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
    ports:
      - "8000:8080"

  # Use caddy for reverse proxy and TLS/SSL certs.
  caddy:
    image: caddy:2
    restart: unless-stopped
    volumes:
      - "caddy_data:/data"
      - "${PWD}/Caddyfile:/etc/caddy/Caddyfile"
    ports:
      - "8001:8001"
      - "8443:443"

  # Telescope itself
  telescope:
    build: .
    image: telescope:latest
    depends_on:
      - hasura
    volumes:
      - "${PWD}/config.toml:/telescope/config.toml"
#    environment:
#      # See the config section about profiles.
#      PROFILE: "live"

volumes:
  db_data:
  caddy_data:
